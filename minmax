# Set up logger
import logging
log_format = '%(levelname)s %(asctime)s %(message)s'
logging.basicConfig(filename='divlog.txt', format= log_format, datefmt='%m/%d/%Y %I:%M:%S %p', level=logging.DEBUG,filemode ='w')
logger = logging.getLogger()

def findextremes(num_list):
    """ returns the smallest and largest elements in an inputted list
    :param: num_list
    :returns: the smallest and largest elements in input num_list
    :raises: TypeError: Input list must not be empty
    :raises: ValueError: Input list must be composed of numbers
    :raises: ValueError: Numbers in list must be real numbers
    :raises: ImportError: Numpy must be installed in Env
    """
    try:
        import numpy as np
    except ImportError:
        logging.error('Numpy must be installed in your local environment!')

    # Check for imaginary numbers in list
    if contains_imaginary(num_list) == True:
        logging.error('Input list contains imaginary elements')
        raise ValueError('Input list contains imaginary elements!')
    # Check that list has entries
    if len(num_list) == 0:
        logging.error('Input list is empty')
        raise TypeError('Input list is empty')
    # Check that all list entries are numbers

    try:
        logger.info("# Find Minimum and Maximum")
        logger.debug('Input: %s', str(num_list))
        minimum = np.min(num_list)
        maximum = np.max(num_list)
    except ValueError:
        logging.error('Input list contains imaginary elements!')

    logger.info("# Return Minimum and Maximum")
    return (minimum,maximum)


def contains_imaginary(num_list):
    import numpy as np
    is_real = np.isreal(num_list)
    if False in is_real:
        imaginary_elements = True
    else:
        imaginary_elements= False
    return imaginary_elements

def all_numbers(num_list):
    is_number = 0
    for num in num_list:
        if type(num) == int:
            is_number = is_number+0
        else:
            is_number = is_number+1
    if is_number ==1:
        only_numbers = False
    else:
        only_numbers = True
    return is_number

#logger.debug('Output:%s', str(output))
print(all_numbers([1,2,'a']))